# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins

#import "Fastfiles/ReleaseFastfile.rb"
#import "Fastfiles/SandboxFastfile.rb"
#import "Fastfiles/AppDistributionFastfile.rb"
#import "Fastfiles/LicenseFastfile.rb

#require 'fastlane/plugin/spaceship'

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
require 'spaceship'
Spaceship::ConnectAPI::App.const_set('ESSENTIAL_INCLUDES', 'appStoreVersions')
ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"

default_platform(:ios)
platform :ios do


 desc "Incrementing Build Number"
  
  lane :increment_build do    
    version = get_version_number(xcodeproj: "MarketApp.xcodeproj")
    current_build_number = latest_testflight_build_number(version: version)
    increment_build_number(build_number: current_build_number + 1)
  end

 desc "Unit test"
  lane:unit_Test do
   clear_derived_data 
	scan
 	sh "bash ./Script/tuistTest.sh"
       slack(
      message: "Unit test  성공",
      slack_url: ENV["SLACK_URL_TEST"],
      payload: { "Build Date" => Time.new.to_s }
    )
      
 # ✅ 에러 처리.
   error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_TEST"]
    )
     end
   end

 desc "build App"
  lane:build_App do
   clear_derived_data
    
      scan
      sh "bash ./Script/buldApp.sh"
       slack(
      message: "Unit test  성공",
      slack_url: ENV["SLACK_URL_TEST"],
      payload: { "Build Date" => Time.new.to_s }
    )

 # ✅ 에러 처리.
   error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_TEST"]
    )
     end
   end

 desc "Install Profiles and Build My App"
  lane :build_ipa do
   clear_derived_data
   	unit_Test
      get_certificates
     get_provisioning_profile
   # resolve_packages
     gym(
      configuration: "Release",
      workspace: "PingPong.xcworkspace",
      output_name: "PingPong.ipa",
      scheme: "PingPong",
     export_method: "app-store",
      xcodebuild_command: "xcodebuild",
       include_bitcode: false,
     # skip_build_archive: false,
      xcodebuild_formatter: "xcpretty",
      output_directory: "./fastlane/output/",
      clean: true,
      silent: true,
      include_symbols: false,
      xcargs: "ARCHIVE=YES",
     disable_package_automatic_updates: false,
     skip_package_ipa: false,
    skip_package_dependencies_resolution: false,
      skip_package_pkg: false,
        export_options: {
         signingStyle: "automatic",
         uploadBitcode: false,
          provisioningProfiles: {
            "com.pingpong.co" => "PngPong",
           # "com.shoping.MarketApps" => "com.shoping.MarketApps AppStore"
             }
           }
       )
      slack(
      message: "빌드 성공",
      slack_url: ENV["SLACK_URL_BUILD"],
      payload: { "Build Date" => Time.new.to_s }     
    )

 # ✅ 에러 처리.
  error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_BUILD"]
    )
    end
  end

  desc "Description of what the lane does"
   lane :upload_testflight do
    version = get_version_number(
        xcodeproj: "PingPong.xcodeproj",
        target: "PingPong"
       )
     build = get_build_number
    #get_certificates
   # get_provisioning_profile
    increment_build_number(
        build_number: latest_testflight_build_number + 1
    )
    lint
    build_ipa
    upload_to_testflight(
    demo_account_required: true,
    beta_app_description:"PingPong",
    api_key_path: "fastlane/apikey.json", 
    ipa:"./fastlane/output/PingPong.ipa",
    changelog:"변경사항",
    skip_waiting_for_build_processing: true)
    slack(
      message: "Testflight 배포에 성공했습니다!",
      slack_url: ENV["SLACK_URL_UPLOAD"],
       payload: {
	"Version": version + " (" + build + ")",
        "Build Date" => Time.new.to_s 
      }
    )
 # ✅ 에러 처리.
    error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_UPLOAD"]
    )
    end
  end


 lane :get_dev_certs  do
    cert(development: true)
    sign(development: true)
 end

 desc "Description of what the lane does"
   desc "Push a new release build to the App Store"
  lane :release do |options|
  # ✅ 매개변수를 넣어서
  # fastlane release version:"2.1.0"
  # 과 같이 사용할 수 있다.
    if options[:version]
      version = options[:version]
      increment_version_number(version_number: options[:version])
       version = get_version_number(
        xcodeproj: "PingPong.xcodeproj",
        target: "PingPong"
       )
     build = get_build_number
    #get_certificates
     #get_provisioning_profile
        unit_Test
        build_ipa      
       upload_to_app_store(
        username: "shuwj81@daum.net",
        team_id: "N94CS4N6R",
        ipa:"./fastlane/output/PingPong.ipa",
        api_key_path: "fastlane/apikey.json",
	skip_metadata: false,
        metadata_path: "./fastlane/metadata",
        skip_screenshots: true, 
        force: true,
        submit_for_review: true,
        automatic_release: false,
        precheck_include_in_app_purchases: false, 
	submission_information: {
        add_id_info_uses_idfa: false,
        export_compliance_encryption_updated: false,
        export_compliance_uses_encryption: false,
        content_rights_contains_third_party_content: false
             },
    # app_version: version,
     # build_number: build,
     # whats_new: "Update for version #{version}"
	   )

    
    end
    #성공했을때  슬랙 메세지   
      slack(
      message: "앱 배포 성공",
      slack_url: ENV["SLACK_URL_UPLOAD"],
      payload: {
        "Version": version + " (" + build + ")",
         "Build Date" => Time.new.to_s 
      }
    )

 # ✅ 에러 처리.
   error do |lane, exception, options|
    slack(
      message: "에러 발생 : #{exception}",
      success: false,
      slack_url: ENV["SLACK_URL_UPLOAD"]
    )
      end
     end	         
    # ✅ if 문을 종료하기 위한 end
    end 
